name: 'BUILD'

on:
  push:

env:
  CACHE_REVISION: '006'
  CEF_BUILD_VERSION_MAC: '5060'
  CEF_HASH_MAC_X86_64: '88b950aa0bfc001061c35e7f1f3fefba856a6afb35e38b2b7b42ddd8dd239182'
  CEF_HASH_MAC_ARM64: '98679b92eea6ea9959ac5aa54f46ca60681d8a86c768c35f496dbdd409bf0642'
  CEF_BUILD_VERSION_LINUX: '5060'
  CEF_BUILD_VERSION_WIN: '5060'
  QT_VERSION_MAC: '6.4.1'
  QT_HASH_MAC_X86_64: 'c5ed7bc9f6e802910ec539066bcf0a8d64100fafce568071f264c88c22c5859b'
  QT_HASH_MAC_ARM64: '1ce472fd1e28f947456b72b1d7ab929d6e93cb774c2928e22eca9bb751b12ccf'
  QT_HASH_MAC_UNIVERSAL: '873f7c9c9f7fcee740a79c075b32a505c932c816d928807fa16f3439c610fbfd'
  QT_VERSION_WIN: '6.3.1'
  DEPS_VERSION_MAC: '2022-11-21'
  DEPS_HASH_MAC_X86_64: 'ed0a145e88496f8975da14a07939dbe5633e60510aada34509a4aef64a66e438'
  DEPS_HASH_MAC_ARM64: 'f397dc524e5ee7f85684f0b9661c45957446e28d166fcd6dfacf895c9d4d2521'
  DEPS_VERSION_WIN: '2023-01-06'
  VLC_VERSION_MAC: '3.0.8'
  VLC_HASH_MAC: 'e0149ef4a20a19b9ecd87309c2d27787ee3f47dfd47c6639644bc1f6fd95bdf6'
  VLC_VERSION_WIN: '3.0.0-git'
  TWITCH_CLIENTID: ${{ secrets.TWITCH_CLIENT_ID }}
  TWITCH_HASH: ${{ secrets.TWITCH_HASH }}
  RESTREAM_CLIENTID: ${{ secrets.RESTREAM_CLIENTID }}
  RESTREAM_HASH: ${{ secrets.RESTREAM_HASH }}
  YOUTUBE_CLIENTID: ${{ secrets.YOUTUBE_CLIENTID }}
  YOUTUBE_CLIENTID_HASH: ${{ secrets.YOUTUBE_CLIENTID_HASH }}
  YOUTUBE_SECRET: ${{ secrets.YOUTUBE_SECRET }}
  YOUTUBE_SECRET_HASH: ${{ secrets.YOUTUBE_SECRET_HASH }}

jobs:
  macos_sparkle:
    name: '04 - macOS Sparkle Updates'
    runs-on: [macos-12]
    if: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' }}
    strategy:
      matrix:
        arch: ['x86_64', 'arm64']
    env:
      HAVE_SPARKLE_KEY: ${{ secrets.SPARKLE_PRIVATE_KEY != '' }}
      SPARKLE_VERSION: '2.3.2'
      SPARKLE_HASH: '2b3fe6918ca20a83729aad34f8f693a678b714a17d33b5f13ca2d25edfa7eed3'
    defaults:
      run:
        shell: bash
    steps:
      - name: 'Checkout'
        if: env.HAVE_SPARKLE_KEY == 'true'
        uses: actions/checkout@v3
        with:
          path: 'repo'
          fetch-depth: 0

      - name: 'Setup folder structure'
        if: env.HAVE_SPARKLE_KEY == 'true'
        run: |
          mkdir builds
          mkdir -p output/appcasts
          mkdir -p output/deltas/${{ matrix.arch }}

      - name: 'Install requirements'
        if: env.HAVE_SPARKLE_KEY == 'true'
        run: |
          pip3 install requests xmltodict
          brew install coreutils pandoc

      - name: 'Determine branch and tag'
        if: env.HAVE_SPARKLE_KEY == 'true'
        id: branch
        run: |
          cd repo/
          
          GIT_TAG="$(git describe --tags --abbrev=0)"
          if [[ ${GIT_TAG} == *'beta'* || ${GIT_TAG} == *'rc'* ]]; then
            echo "branch=beta" >> $GITHUB_OUTPUT
            echo "deltas=0" >> $GITHUB_OUTPUT
          else
            echo "branch=stable" >> $GITHUB_OUTPUT
            echo "deltas=1" >> $GITHUB_OUTPUT
          fi
          
          echo "Git tag: ${GIT_TAG}"
          
          # Write tag description to file
          git tag -l --format='%(contents)' ${GIT_TAG}
          git tag -l --format='%(contents)' ${GIT_TAG} >> ../notes.rst

      - name: 'Download Sparkle'
        if: env.HAVE_SPARKLE_KEY == 'true'
        run: |
          wget "https://github.com/sparkle-project/Sparkle/releases/download/${{ env.SPARKLE_VERSION }}/Sparkle-${{ env.SPARKLE_VERSION }}.tar.xz" -O Sparkle.tar.xz

          if [[ '${{ env.SPARKLE_HASH }}' != "$(sha256sum Sparkle.tar.xz | cut -d " " -f 1)" ]]; then
              echo "Sparkle download hash does not match!"
              exit 1
          fi

          mkdir sparkle && cd sparkle
          tar -xf ../Sparkle.tar.xz

      - name: 'Write private key'
        if: env.HAVE_SPARKLE_KEY == 'true'
        run: echo -n "${{ secrets.SPARKLE_PRIVATE_KEY }}" >> eddsa_private.key

      - name: 'Download artifact'
        if: env.HAVE_SPARKLE_KEY == 'true'
        run: |
          mkdir artifacts
          cd artifacts
          wget "https://r2.rodney.io/sparkle/obs-studio-29.0.0-beta1-f6ed7c43b-macos-${{ matrix.arch }}.dmg"
          wget "https://r2.rodney.io/sparkle/obs-studio-29.0.0-beta1-4df2b83f2-macos-${{ matrix.arch }}.dmg"

      - name: 'Download existing appcast and builds'
        if: ${{ env.HAVE_SPARKLE_KEY == 'true' && false }}
        env:
          BRANCH: ${{ steps.branch.outputs.branch }}
          DELTAS: ${{ steps.branch.outputs.deltas }}
          ARCH: ${{ matrix.arch }}
        run: python3 repo/CI/macos/appcast_download.py

      - name: 'Prepare release notes'
        if: env.HAVE_SPARKLE_KEY == 'true'
        run: |
          pandoc -f rst -t html notes.rst > builds/obs-studio-29.0.0-beta1-f6ed7c43b-macos-${{ matrix.arch }}.html

      - name: 'Update Appcast'
        if: env.HAVE_SPARKLE_KEY == 'true'
        run: |
          mv artifacts/*.dmg builds/
          ./sparkle/bin/generate_appcast \
              --verbose \
              --ed-key-file ./eddsa_private.key \
              --download-url-prefix "https://cdn-fastly.obsproject.com/downloads/" \
              --maximum-versions 0 \
              --maximum-deltas ${{ steps.branch.outputs.deltas }} \
              --channel "${{ steps.branch.outputs.branch }}" builds/
          # Move deltas, if any
          if compgen -G "builds/*.delta" > /dev/null; then
            mv builds/*.delta output/deltas/${{ matrix.arch }}
          fi
          # Move appcasts
          mv builds/*.xml output/appcasts/

      - name: 'Create legacy appcast'
        if: env.HAVE_SPARKLE_KEY == 'true'
        run: python3 repo/CI/macos/appcast_convert.py

      - name: 'Upload appcast and deltas'
        if: env.HAVE_SPARKLE_KEY == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: 'macos-sparkle-updates'
          path: '${{ github.workspace }}/output'
