name: 'BUILD'

on:
  push:
    paths-ignore: ['**.md']
    branches: ['*']
    tags: ['*']
  pull_request:
    paths-ignore: ['**.md']
    branches: [master]
  merge_group:
    branches: [master]

env:
  CACHE_REVISION: '006'
  CEF_BUILD_VERSION_LINUX: '5060'
  CEF_BUILD_VERSION_WIN: '5060'
  QT_VERSION_MAC: '6.4.3'
  QT_VERSION_WIN: '6.4.3'
  DEPS_VERSION_WIN: '2023-06-22'
  VLC_VERSION_WIN: '3.0.0-git'
  TWITCH_CLIENTID: ${{ secrets.TWITCH_CLIENT_ID }}
  TWITCH_HASH: ${{ secrets.TWITCH_HASH }}
  RESTREAM_CLIENTID: ${{ secrets.RESTREAM_CLIENTID }}
  RESTREAM_HASH: ${{ secrets.RESTREAM_HASH }}
  YOUTUBE_CLIENTID: ${{ secrets.YOUTUBE_CLIENTID }}
  YOUTUBE_CLIENTID_HASH: ${{ secrets.YOUTUBE_CLIENTID_HASH }}
  YOUTUBE_SECRET: ${{ secrets.YOUTUBE_SECRET }}
  YOUTUBE_SECRET_HASH: ${{ secrets.YOUTUBE_SECRET_HASH }}
  GPU_PRIORITY_VAL: ${{ secrets.GPU_PRIORITY_VAL }}

jobs:
  clang_check:
    name: '01 - Code Format Check'
    runs-on: [ubuntu-22.04]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: 'Install clang-format'
        run: sudo apt-get install -y clang-format-13

      - name: 'Run clang-format'
        run: |
          ./CI/check-format.sh
          ./CI/check-changes.sh

      - name: 'Install cmake-format'
        run: sudo pip install cmakelang

      - name: 'Run cmake-format'
        run: |
          ./CI/check-cmake.sh

      - name: 'Run format-manifest.py'
        run: |
          python3 ./build-aux/format-manifest.py
          ./CI/check-changes.sh

  config:
    name: '01 - Configure Build Jobs'
    runs-on: [ubuntu-22.04]
    outputs:
      create_artifacts: ${{ steps.config.outputs.create_artifacts }}
      cache_date: ${{ steps.config.outputs.cache_date }}
    steps:
      - name: 'Configure Build Jobs'
        id: config
        run: |
          if [[ "${{ github.event_name == 'pull_request' }}" == "true" ]]; then
            if test -n "$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s "${{ github.event.pull_request.url }}" | jq -e '.labels[] | select(.name == "Seeking Testers")')"; then
              echo 'create_artifacts=true' >> $GITHUB_OUTPUT
            else
              echo 'create_artifacts=false' >> $GITHUB_OUTPUT
            fi
          else
            echo 'create_artifacts=true' >> $GITHUB_OUTPUT
          fi
          echo "cache_date=$(date +"%Y-%m-%d")" >> $GITHUB_OUTPUT

  linux_build:
    name: '02 - Linux'
    runs-on: ${{ matrix.ubuntu }}
    strategy:
      matrix:
        ubuntu: ['ubuntu-22.04']
    if: always()
    needs: [config, clang_check]
    defaults:
      run:
        shell: bash
        working-directory: 'obs-studio'
    env:
      BUILD_FOR_DISTRIBUTION: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          path: 'obs-studio'
          fetch-depth: 0

      - name: 'Restore ccache from cache'
        id: ccache-cache
        uses: actions/cache@v3
        env:
          CACHE_NAME: 'ccache-cache'
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ matrix.ubuntu }}-${{ github.event_name }}-${{ github.head_ref }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ matrix.ubuntu }}-push-

      - name: 'Restore Chromium Embedded Framework from cache'
        id: cef-cache
        uses: actions/cache@v3
        env:
          CACHE_NAME: 'cef-cache'
        with:
          path: ${{ github.workspace }}/obs-build-dependencies/cef_binary_${{ env.CEF_BUILD_VERSION_LINUX }}_linux64
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.CEF_BUILD_VERSION_LINUX }}-${{ env.CACHE_REVISION }}

      - name: 'Setup build environment'
        id: setup
        run: |
          echo "commitHash=$(git rev-parse --short=9 HEAD)" >> $GITHUB_OUTPUT

      - name: 'Install dependencies'
        env:
          RESTORED_CEF: ${{ steps.cef-cache.outputs.cache-hit }}
        run: CI/linux/01_install_dependencies.sh ${{ matrix.script_options }}

      - name: 'Build OBS'
        run: CI/linux/02_build_obs.sh ${{ matrix.script_options }}

      - name: 'Run tests'
        if: success()
        run: cmake --build build -t test

      - name: 'Create build artifact'
        if: ${{ success() && fromJSON(needs.config.outputs.create_artifacts) }}
        run: |
          CI/linux/03_package_obs.sh
          ARTIFACT_NAME=$(basename $(/usr/bin/find build  -maxdepth 1 -type f -name "obs-studio-*.deb" | sort -rn | head -1))
          echo "FILE_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV
          echo "DEBUG_FILE_NAME=${ARTIFACT_NAME//.deb/-dbgsym.ddeb}" >> $GITHUB_ENV

      - name: 'Upload build Artifact'
        if: ${{ success() && fromJSON(needs.config.outputs.create_artifacts) }}
        uses: actions/upload-artifact@v3
        with:
          name: 'obs-studio-${{ matrix.ubuntu }}-${{ steps.setup.outputs.commitHash }}'
          path: '${{ github.workspace }}/obs-studio/build/${{ env.FILE_NAME }}'

      - name: 'Upload debug symbol Artifact'
        if: ${{ success() && fromJSON(needs.config.outputs.create_artifacts) }}
        uses: actions/upload-artifact@v3
        with:
          name: 'obs-studio-${{ matrix.ubuntu }}-${{ steps.setup.outputs.commitHash }}-dbgsym'
          path: '${{ github.workspace }}/obs-studio/build/${{ env.DEBUG_FILE_NAME }}'

  linux_package:
    name: '02 - Flatpak'
    runs-on: [ubuntu-latest]
    needs: [config, clang_check]
    defaults:
      run:
        shell: bash
    container:
      image: bilelmoussaoui/flatpak-github-actions:kde-6.4
      options: --privileged
    steps:

      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: 'Setup build environment'
        id: setup
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CACHE_KEY: flatpak-builder-${{ hashFiles('build-aux/**/*.json') }}
        run: |
          dnf install -y -q gh
          gh extension install actions/gh-actions-cache

          git config --global --add safe.directory $GITHUB_WORKSPACE

          KEY="$CACHE_KEY-x86_64"
          CACHE_HIT=$(gh actions-cache list -B linux-keychain-temp --key $KEY | grep -q $KEY && echo 'true' || echo 'false')

          echo "git_hash=$(git rev-parse --short=9 HEAD)" >> $GITHUB_OUTPUT
          echo "cache_key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "cache_hit=$CACHE_HIT" >> $GITHUB_OUTPUT

      - name: Build Flatpak Manifest
        uses: flatpak/flatpak-github-actions/flatpak-builder@v6.1
        with:
          build-bundle: ${{ fromJSON(needs.config.outputs.create_artifacts) }}
          bundle: obs-studio-flatpak-${{ steps.setup.outputs.git_hash }}.flatpak
          manifest-path: build-aux/com.obsproject.Studio.json
          cache: ${{ fromJSON(steps.setup.outputs.cache_hit) || github.event_name == 'push' }}
          restore-cache: ${{ fromJSON(steps.setup.outputs.cache_hit) }}
          cache-key: ${{ steps.setup.outputs.cache_key }}
