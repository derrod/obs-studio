name: Steam Upload

on:
  release:
    types:
    - published
  workflow_dispatch:
  # workflow_dispatch:
  #   inputs:
  #     tag:
  #       description: 'Release to upload'
  #       required: true
  schedule:
  - cron: 0 0,12 * * *

jobs:
  build_elevator:
    name: Build Elevator exe
    runs-on: windows-2019
    env:
      VERSION: 0.0.1
    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v2

    - name: Install ps2exe
      run: |
        Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
        Install-Module -Name ps2exe
      shell: powershell

    - name: Build executable
      run: |
        Invoke-ps2exe `
          -noOutput -noVisualStyles -noConsole `
          -inputFile .\CI\steam\run_as_admin.ps1 `
          -version ${{ env.VERSION }} `
          -title "RunAsAdmin" `
          -outputFile "run_as_admin.exe"
      shell: powershell

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: run_as_admin
        path: run_as_admin.exe

  upload:
    name: Build and Upload
    runs-on: ubuntu-20.04
    needs: build_elevator

    steps:
    - name: Download elevator binary
      uses: actions/download-artifact@v2

    - name: Display structure of downloaded files
      run: ls -R

    - name: Setup 7zip
      run: |
        mkdir 7z
        (
            cd 7z
            curl -s https://www.7-zip.org/a/7z2107-linux-x64.tar.xz | tar -xJ
            echo "$(pwd)" >> $GITHUB_PATH
        )

    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: source

    - name: Download and extract release assets
      if: github.event_name == 'release'
      run: |
        DESC=${{ github.event.release.tag_name }}
        if [ "${{ github.event.release.prerelease }}" = "true" ]; then
          BRANCH="beta_staging"
        else
          BRANCH="staging"
        fi

        curl -s "${{ github.event.release.assets_url }}" -o assets.json
        WIN_ASSET_URL=$(jq -r '.[] | select(.name|test(".*x64.zip")) .browser_download_url' assets.json)
        MAC_ASSET_URL=$(jq -r '.[] | select(.name|test(".*.dmg")) .browser_download_url' assets.json)
        wget "${WIN_ASSET_URL}" -O windows.zip
        wget "${MAC_ASSET_URL}" -O mac.dmg

        mkdir steam
        (
          cd steam
          echo "::group::Extract Win64"
          mkdir steam-windows
          (
            cd steam-windows
            unzip ../../windows.zip
          )
          echo "::endgroup::"
          
          echo "::group::Extract macOS"

          echo "Extracting DMG and moving over .app ..."
          mkdir steam-macos

          # ignore exit code from 7zip
          7zzs x ../mac.dmg -otmp || true

          mv tmp/*/OBS.app steam-macos
          rm -rf tmp/
          echo "::endgroup::"
        )
        rm windows.zip mac.dmg

        # set env variables for subsequent steps
        echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
        echo "DESC=${DESC}" >> $GITHUB_ENV

    - name: Download and extract nightly build
      if: github.event_name != 'release'
      run: |
        BRANCH="nightly"
        # don't hardcode this once this goes live
        curl -s "https://api.github.com/repos/obsproject/obs-studio/actions/workflows/583765/runs?per_page=10&event=push&status=completed&branch=master" -o builds.json
        ARTIFACTS_URL=$(jq -r '.workflow_runs[] | select(.conclusion == "success") .artifacts_url' builds.json | head -n1)
        DESC="nightly-g$(jq -r '.workflow_runs[] | select(.conclusion == "success") .head_sha' builds.json | head -n1 | cut -c1-7)"

        curl -s $ARTIFACTS_URL -o artifacts.json
        WIN_ARTIFACT_ID=$(jq -r '.artifacts[] | select(.name|test(".*win64")) .id' artifacts.json)
        MAC_ARTIFACT_ID=$(jq -r '.artifacts[] | select(.name|test(".*dmg")) .id' artifacts.json)

        wget "https://obsbot.rodney.io/artifacts/${WIN_ARTIFACT_ID}" -O windows.zip
        wget "https://obsbot.rodney.io/artifacts/${MAC_ARTIFACT_ID}" -O mac.dmg.zip

        mkdir steam
        (
          cd steam
          echo "::group::Extract Win64"
          mkdir steam-windows
          (
            cd steam-windows
            unzip ../../windows.zip
          )
          echo "::endgroup::"
          
          echo "::group::Extract macOS"

          echo "Extracting DMG and moving over .app ..."
          mkdir steam-macos

          unzip ../mac.dmg.zip
          # ignore exit code from 7zip
          7zzs x *.dmg -otmp || true

          mv tmp/*/OBS.app steam-macos
          rm -rf tmp/ *.dmg
          echo "::endgroup::"
        )
        rm windows.zip mac.dmg.zip

        # set env variables for subsequent steps
        echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
        echo "DESC=${DESC}" >> $GITHUB_ENV

    - name: Check if nightly has already been uploaded
      if: github.event_name != 'release'
      id: cache-check
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/steam/release.vdf
        key: ${{ env.BRANCH }}-${{ env.DESC }}

    - name: Setup steamcmd
      if: steps.cache-check.outputs.cache-hit != 'true'
      uses: CyberAndrii/setup-steamcmd@v1

    - name: Generate Steam auth code
      if: steps.cache-check.outputs.cache-hit != 'true'
      id: steam-totp
      uses: CyberAndrii/steam-totp@v1
      with:
        shared_secret: ${{ secrets.STEAM_GUARD_SEED }}

    - name: Upload to Steam
      if: steps.cache-check.outputs.cache-hit != 'true'
      run: |
        cd steam

        echo "::group::Prepare Win64"

        echo "Copying scripts and creating disable_updater sentinel..."
        cp -r ../source/CI/steam/scripts steam-windows/scripts
        # copy over previously built executable
        cp ../run_as_admin.exe steam-windows/scripts
        # sentinel file to disable updater
        touch steam-windows/disable_updater
        echo "::endgroup::"

        echo "::group::Prepare macOS"
        echo "Creating disable_updater sentinel file"
        touch steam-macos/OBS.app/Contents/disable_updater
        echo "::endgroup::"

        echo "::group::Preparing build file"
        sed 's/@@DESC@@/${{ env.DESC }}/;s/@@BRANCH@@/${{ env.BRANCH }}/' ../source/CI/steam/obs_build.vdf > release.vdf
        echo "Generated file:"
        cat release.vdf
        echo "::endgroup::"

        echo "::group::Upload to Steam"
        steamcmd +login ${{ secrets.STEAM_USER }} ${{ secrets.STEAM_PASSWORD }} ${{ steps.steam-totp.outputs.code }} +run_app_build $(pwd)/release.vdf +quit
        echo "::endgroup::"

    - name: Upload build logs
      if: steps.cache-check.outputs.cache-hit != 'true'
      uses: actions/upload-artifact@v2
      with:
        name: steam-build-logs
        path: ${{ github.workspace }}/steam/build/*.log
