name: Run bouf
description: Generates signed OBS install files and updater files
inputs:
  updaterPrivateKey:
    description: Private key for signing update manifest
    required: true
  gcpWorkloadIdentityProvider:
    description: GCP Identity Provider Pool ID
    required: true
  gcpServiceAccountName:
    description: Google service account name
    required: true
  version:
    description: Version string (e.g., 30.0.0-rc1)
    required: true
  channel:
    description: Update channel
    required: false
    default: 'stable'

runs:
  using: composite
  steps:
    - name: Extract Artifact
      shell: pwsh
      run: |
        Expand-Archive -Path build\*.zip -DestinationPath build
        Remove-Item build\*.zip

    - name: Setup bouf
      shell: pwsh
      env:
        BOUF_TAG: 'v0.6.0'
        BOUF_HASH: '06861ae6d714b754602000bd51607b5b72e655b978b7e7497b0eb970b1613dd3'
        BOUF_NSIS_HASH: 'bb0561a76cecaba62785642dd71052a9fe53458e45df108ca08867ee333b80bd'
        GH_TOKEN: ${{ github.token }}
      run: |
        # Download bouf release
        . $env:GITHUB_ACTION_PATH\Ensure-Location.ps1
        . $env:GITHUB_ACTION_PATH\Invoke-External.ps1
        Ensure-Location bouf
        Invoke-External gh release download "$env:BOUF_TAG" -R "obsproject/bouf" -p "*windows*.zip" -p "*nsis*.zip"
        
        if ((Get-FileHash *windows*.zip -Algorithm SHA256).Hash -ne "$env:BOUF_HASH") {
          throw "bouf hash does not match."
        }
        if ((Get-FileHash *nsis*.zip -Algorithm SHA256).Hash -ne "$env:BOUF_NSIS_HASH") {
          throw "NSIS package hash does not match."
        }
        
        Expand-Archive -Path *windows*.zip -DestinationPath bin
        Expand-Archive -Path *nsis*.zip -DestinationPath nsis

    - name: Download Google CNG Provider
      shell: pwsh
      env:
        CNG_TAG: 'cng-v0.9'
        GH_TOKEN: ${{ github.token }}
      run: |
        # Download Google CNG provider release from github
        . $env:GITHUB_ACTION_PATH\Ensure-Location.ps1
        . $env:GITHUB_ACTION_PATH\Invoke-External.ps1
        Ensure-Location gcng
        
        Invoke-External gh release download "$env:CNG_TAG" -R "GoogleCloudPlatform/kms-integrations" -p "*amd64.zip"
        Expand-Archive -Path *.zip
        $sigPath = Get-ChildItem *.sig -Recurse
        $msiPath = Get-ChildItem *.msi -Recurse
        # Verify digital signature against Google's public key
        Invoke-External openssl dgst -sha384 -verify "$env:GITHUB_ACTION_PATH/cng-release-signing-key.pem" -signature $sigPath $msiPath
        # Finally, install the CNG provider
        Invoke-External msiexec /i $msiPath /qn /norestart

    - name: Install pandoc and rclone
      shell: pwsh
      run: choco install pandoc rclone --no-progress -y

    - name: Prepare Release Notes
      shell: pwsh
      run: |
        # Release notes are just the tag body on Windows
        Set-Location repo
        git tag -l --format='%(contents:body)' ${{ inputs.version }} > "${{ github.workspace }}/notes.rst"
    
    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: ${{ inputs.gcpWorkloadIdentityProvider }}
        service_account: ${{ inputs.gcpServiceAccountName }}

    - name: Download Old Builds
      shell: pwsh
      env:
        RCLONE_GCS_ENV_AUTH: 'true'
      run: |
        rclone copy --transfers 100 --fast-list :gcs:obs-builds "${{ github.workspace }}/old_builds"

    - name: Run bouf
      shell: pwsh
      env:
        UPDATER_PRIVATE_KEY: ${{ inputs.updaterPrivateKey }}
      run: |
        . $env:GITHUB_ACTION_PATH\Invoke-External.ps1
        $boufArgs = @(
           "--config",     "$env:GITHUB_ACTION_PATH/config.toml",
           "--version",    "${{ inputs.version }}"
           "--branch",     "${{ inputs.channel }}"
           "--notes-file", "${{ github.workspace }}/notes.rst"
           "-i",           "${{ github.workspace }}/build"
           "-p",           "${{ github.workspace }}/old_builds"
           "-o",           "${{ github.workspace }}/output"
        )
        Invoke-External "${{ github.workspace }}\bouf\bin\bouf.exe" @boufArgs

    - name: Upload new builds
      shell: pwsh
      env:
        RCLONE_GCS_ENV_AUTH: 'true'
        RCLONE_GCS_BUCKET_POLICY_ONLY: 'true'
      run: |
        rclone copy --transfers 100 --fast-list "${{ github.workspace }}/old_builds" :gcs:obs-builds

    - name: Cleanup bouf Output Directory
      shell: pwsh
      run: |
        # Compress updater data so the artifact upload won't take forever
        Compress-Archive -Path output\updater -DestinationPath output\updater.zip -CompressionLevel NoCompression
        # Delete zipped folders
        Remove-Item output\install -Recurse -Force
        Remove-Item output\pdbs -Recurse -Force
        Remove-Item output\updater -Recurse -Force
